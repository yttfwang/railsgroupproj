update & destroy


edit --> shows the form where you can edit your model
submits to update action

/users/5/edit (GET)
@user = User.find(params[:id])


update --> updates your model with the fields given
usually redirects to another page

/users/5 (PUT)
user = User.find(params[:id])
user.update_attributes(user_params)


destroy --> destroys model with given id

/users/5 (DELETE)
user = User.find(params[:id])
user.destroy

ex: // what the edit, update, and destroy typically look like
class UsersController < ApplicationController
  def edit
    @user = User.find(params[:id])
  end
  def update
    @user = User.find(params[:id])
    if @user.update_attributes(user_params)
      redirect_to user_path(@user)
    else
      render 'edit'
    end
  end

  def destroy
    @user = User.find(params[:id])
    @user.destroy
    redirect_to rooth_path
  end

  private

  def user_params
    params.require(:user).permit(:name)
  end
end


validations

validates :attribute, {validators}

EMAIL_PATTERN = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
validates :email, format { with: EMAIL_PATTERN }, uniqueness: true, presence: true
validates :name, presence: try
OR
validates_validator_of [ :attributes ]

validates_presence of :email, :name


associations
has_many
--> a student has many grades
belongs_to
--> grades belong to students

class Student < ActiveRecord::Base
  has_many :grades
end

class Grade < ActiveRecord::Base
  belongs_to :student
end

student = Student.find(1)
student.grades


quick review: Params
-> dictionary that contains info about the request made (Controller, action, url, etc.)
-> also contains form parameters, url parameters, ids, etc.

usually contains form data

def create
  puts params
  @post = Post.new post_params
  @post.save
  redirect_to root_path
end

strong params could potentially prevent problems
curl -d "user[name]=Charles"
     -d "user[major]=EECS"
     -d "user[age]=20"
     -d "user[admin]=true" // strong params?
localhost:3000/users

ex:
def user_params
  params.require(:user).permit(:name, :age, :major)
end
even if he tried making admin true, strong params prevents it so he can't mess things up

if we didn't use strong params this is what it'd look like:
def create
  @user = User.new params[:user]
end
BECOMES
def create
  @user = User.new user_params
end

private

def user_params
  params.require(:user).permit(:name, :age, :major)
end


routing

resources :students
resources :students, only: [:show]
lec 5, 16:34

resources :emails do
  # POST  /emails/:id/archive   email#archive
  member do
    post :archive
  end

  # GET   /emails/archived    emails#archived
  collection do
    get :archived
  end
end

gems
lec 5, 20:09

simple_form
makes forms easier!

slim-rails = really nice replacement for ERB
